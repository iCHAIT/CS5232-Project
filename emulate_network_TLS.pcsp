//=======================Model Details===========================
enum{X,A,B,C,D,E,F,Y,null}; // 

var trans = null;
#import "read_file";
#define goal trans == Y;

var path_index = 3 ; //facebook->1, twitter->2, Dropbox->3

FromX = pcase {
       call (function_read,path_index,0,0) : trans_to_Start{trans=X} -> FromX
       call (function_read,path_index,0,1) : trans_to_Client_Hello{trans=A} -> FromA
       call (function_read,path_index,0,2) : trans_to_Server_Hello{trans=B} -> FromB
       call (function_read,path_index,0,3) : trans_to_Server_Hello_Done{trans=C} -> FromC
       call (function_read,path_index,0,4) : trans_to_Client_KE{trans=D} -> FromD
       call (function_read,path_index,0,5) : trans_to_New_Session_Ticket{trans=E} -> FromE
       call (function_read,path_index,0,6) : trans_to_Application_Data{trans=F} -> FromF
       call (function_read,path_index,0,7) : trans_to_Stop{trans=Y} -> Stop
};

FromA = pcase {
       call (function_read,path_index,1,0) : trans_to_Start{trans=X} -> FromX
       call (function_read,path_index,1,1) : trans_to_Client_Hello{trans=A} -> FromA
       call (function_read,path_index,1,2) : trans_to_Server_Hello{trans=B} -> FromB
       call (function_read,path_index,1,3) : trans_to_Server_Hello_Done{trans=C} -> FromC
       call (function_read,path_index,1,4) : trans_to_Client_KE{trans=D} -> FromD
       call (function_read,path_index,1,5) : trans_to_New_Session_Ticket{trans=E} -> FromE
       call (function_read,path_index,1,6) : trans_to_Application_Data{trans=F} -> FromF
       call (function_read,path_index,1,7) : trans_to_Stop{trans=Y} -> Stop
};

FromB = pcase {
       call (function_read,path_index,2,0) : trans_to_Start{trans=X} -> FromX
       call (function_read,path_index,2,1) : trans_to_Client_Hello{trans=A} -> FromA
	   call (function_read,path_index,2,2) : trans_to_Server_Hello{trans=B} -> FromB
       call (function_read,path_index,2,3) : trans_to_Server_Hello_Done{trans=C} -> FromC
       call (function_read,path_index,2,4) : trans_to_Client_KE{trans=D} -> FromD
       call (function_read,path_index,2,5) : trans_to_New_Session_Ticket{trans=E} -> FromE
       call (function_read,path_index,2,6) : trans_to_Application_Data{trans=F} -> FromF
       call (function_read,path_index,2,7) : trans_to_Stop{trans=Y} -> Stop
};

FromC = pcase {
       call (function_read,path_index,3,0) : trans_to_Start{trans=X} -> FromX
       call (function_read,path_index,3,1) : trans_to_Client_Hello{trans=A} -> FromA
	   call (function_read,path_index,3,2) : trans_to_Server_Hello{trans=B} -> FromB
       call (function_read,path_index,3,3) : trans_to_Server_Hello_Done{trans=C} -> FromC
       call (function_read,path_index,3,4) : trans_to_Client_KE{trans=D} -> FromD
       call (function_read,path_index,3,5) : trans_to_New_Session_Ticket{trans=E} -> FromE
       call (function_read,path_index,3,6) : trans_to_Application_Data{trans=F} -> FromF
       call (function_read,path_index,3,7) : trans_to_Stop{trans=Y} -> Stop
};

FromD = pcase {
       call (function_read,path_index,4,0) : trans_to_Start{trans=X} -> FromX
       call (function_read,path_index,4,1) : trans_to_Client_Hello{trans=A} -> FromA
	   call (function_read,path_index,4,2) : trans_to_Server_Hello{trans=B} -> FromB
       call (function_read,path_index,4,3) : trans_to_Server_Hello_Done{trans=C} -> FromC
       call (function_read,path_index,4,4) : trans_to_Client_KE{trans=D} -> FromD
       call (function_read,path_index,4,5) : trans_to_New_Session_Ticket{trans=E} -> FromE
       call (function_read,path_index,4,6) : trans_to_Application_Data{trans=F} -> FromF
       call (function_read,path_index,4,7) : trans_to_Stop{trans=Y} -> Stop
};

FromE = pcase {
       call (function_read,path_index,5,0) : trans_to_Start{trans=X} -> FromX
       call (function_read,path_index,5,1) : trans_to_Client_Hello{trans=A} -> FromA
	   call (function_read,path_index,5,2) : trans_to_Server_Hello{trans=B} -> FromB
       call (function_read,path_index,5,3) : trans_to_Server_Hello_Done{trans=C} -> FromC
       call (function_read,path_index,5,4) : trans_to_Client_KE{trans=D} -> FromD
       call (function_read,path_index,5,5) : trans_to_New_Session_Ticket{trans=E} -> FromE
       call (function_read,path_index,5,6) : trans_to_Application_Data{trans=F} -> FromF
       call (function_read,path_index,5,7) : trans_to_Stop{trans=Y} -> Stop
};

FromF = pcase {
       call (function_read,path_index,6,0) : trans_to_Start{trans=X} -> FromX
       call (function_read,path_index,6,1) : trans_to_Client_Hello{trans=A} -> FromA
	   call (function_read,path_index,6,2) : trans_to_Server_Hello{trans=B} -> FromB
       call (function_read,path_index,6,3) : trans_to_Server_Hello_Done{trans=C} -> FromC
       call (function_read,path_index,6,4) : trans_to_Client_KE{trans=D} -> FromD
       call (function_read,path_index,6,5) : trans_to_New_Session_Ticket{trans=E} -> FromE
       call (function_read,path_index,6,6) : trans_to_Application_Data{trans=F} -> FromF
       call (function_read,path_index,6,7) : trans_to_Stop{trans=Y} -> Stop
};

trace = FromX ;
#assert trace reaches goal with prob;






